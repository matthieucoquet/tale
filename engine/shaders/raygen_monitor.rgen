#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#define SUPER_SAMPLE

struct Pose
{
    vec4 rotation;
    vec3 position;
};

struct Fov
{
    float left;
    float right;
    float up;
    float down;
};

layout(push_constant, scalar) uniform Eye {
    Pose pose;
    Fov fov;
} eye;

layout(binding = 0, set = 0) uniform accelerationStructureEXT acceleration_structure; 
layout(binding = 1, set = 0, rgba16) uniform image2D image;

layout(location = 0) rayPayloadEXT vec3 hit_value;

vec3 trace(vec2 offset)
{
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + offset;
    const vec2 pixel_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    vec3 direction = vec3(
        1.0,
        -(tan(eye.fov.left) + (pixel_uv.x) * (tan(eye.fov.right) - tan(eye.fov.left))),
        tan(eye.fov.up) + (pixel_uv.y) * (tan(eye.fov.down) - tan(eye.fov.up)));

    direction = direction + 2.0 * cross(eye.pose.rotation.xyz, cross(eye.pose.rotation.xyz, direction) + eye.pose.rotation.w * direction);
    direction = normalize(direction);

    float tmin = 0.2;
    float tmax = 120.0;

    hit_value = vec3(0.0, 0.0, 0.0);
    traceRayEXT(
        acceleration_structure, 
        gl_RayFlagsOpaqueEXT, 
        0xFF, 0, 0, 0, 
        eye.pose.position,
        tmin, 
        direction.xyz, 
        tmax, 
        0);
    return hit_value;
}

void main()
{
#ifdef SUPER_SAMPLE
    vec3 color = 0.25 * trace(vec2(0.25, 0.25));
    color += 0.25 * trace(vec2(0.25, 0.75));
    color += 0.25 * trace(vec2(0.75, 0.25));
    color += 0.25 * trace(vec2(0.75, 0.75));
#else
	vec3 color = trace(vec2(0.5, 0.5));
#endif
    imageStore(image, nonuniformEXT(ivec2(gl_LaunchIDEXT.xy)), vec4(color, 1.0));
}



