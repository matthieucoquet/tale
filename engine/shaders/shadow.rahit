#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "common_types.glsl"
#include "model_map_function"

layout(location = 1) rayPayloadInEXT float shadow_payload;

float raymarch_soft_shadow(in float factor)
{
    const vec3 origin = gl_ObjectRayOriginEXT;
    const vec3 direction = gl_ObjectRayDirectionEXT;
    
    //float res = 1.0;
    const float len = length(direction);
    float t = gl_RayTminEXT;
    for (int i = 0; i < 128 && t < gl_RayTmaxEXT; i++)
    {
        Hit hit = map(origin + t * direction);
        const float global_distance = hit.distance / len;
        if(global_distance < 0.0001) {
            return 0.0;
        }
    //    res = min(res, factor * global_distance / t);
        t += ADVANCE_RATIO * global_distance;
    }
    //return res;
    return 1.0;
}

void main()
{
    shadow_payload = min(shadow_payload, raymarch_soft_shadow(256.0));
    if (shadow_payload == 0.0)
    {
        //terminateRayEXT;
    }
}


